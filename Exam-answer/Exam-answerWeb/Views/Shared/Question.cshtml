@model QuestionViewModel
@{
    var configuration = ViewContext.HttpContext.RequestServices.GetService<IConfiguration>();

    var pageBaseCanonicalUrl = configuration.GetValue(typeof(string), "PageBaseCanonicalUrl")?.ToString();

    int questionNumber = Model.Exam.Questions.IndexOf(Model) + 1;

    for (int i = 0; i < Model.Contents.Count; i++)
    {
        var content = Model.Contents[i];
        if (content.Text.Contains(" VPN ", StringComparison.CurrentCultureIgnoreCase))
        {
            content.Text = content.Text.Replace(" VPN ",
                $@"<a style=""color: deepskyblue"" class=""underline"" title=""Online security starts with a click. Advanced security. Internet freedom. Complete privacy."" href=""https://go.nordvpn.net/aff_c?offer_id=15&aff_id=40528&url_id=902"" target=""_blank"" rel=""noopener"">  VPN  </a>",
                StringComparison.InvariantCultureIgnoreCase);
        }
    }

    for (int i = 0; i < Model.Explanations.Count; i++)
    {
        var explanation = Model.Explanations[i];
        if (explanation.Text.Contains(" VPN ", StringComparison.CurrentCultureIgnoreCase))
        {
            explanation.Text = explanation.Text.Replace(" VPN ",
            $@"<a class=""inline-block pt1 underline caps"" title=""Online security starts with a click. Advanced security. Internet freedom. Complete privacy."" href=""https://go.nordvpn.net/aff_c?offer_id=15&aff_id=40528&url_id=902"" target=""_blank"" rel=""noopener"">  VPN  </a>",
            StringComparison.InvariantCultureIgnoreCase);
        }
    }
}
<h1><a href="@pageBaseCanonicalUrl">Home</a> / <a href="@Model.Exam.ExamProviderUrl">@Model.Exam.Provider</a> / <a href="@Model.Exam.ExamUrl"> @Model.Exam.Code</a> / <a href="@(Model.Exam.ExamUrl + "/question" + questionNumber)"> Question @(questionNumber)</a></h1>
<partial name="_PrevNextPartial" />
<amp-accordion disable-session-states>
    <section expanded>
        <h2>Question @(questionNumber)</h2>
        <div>
            <div class="m2 right">
                @*@if (Model.Contents.Select(s => s.Text?.Length).Sum() > 500)
                    {
                        @Html.Raw(Html.GetAddsenseAdd(AdsenseType.Fixed_336_280, Model.ShowAdsInQuestion.GetValueOrDefault()))
                    }
                    else
                    {
                        @Html.Raw(Html.GetAddsenseAdd(AdsenseType.Fixed_320_100, Model.ShowAdsInQuestion.GetValueOrDefault()))
                    }*@

            </div>
            <div>
                @{
                    var lastContent = Model.Contents.ToList();
                }
                @foreach (var content in lastContent)
                {
                    <h3>
                        @{
                            var lines2 = content.Text.Split(Environment.NewLine);
                        }
                        @for (int i = 0; i < lines2.Length; i++)
                        {
                            var line = lines2[i].Replace("Constants.PaddingChar.ToString()", "&nbsp;");

                            <p class="justify">
                                @Html.Raw(line)
                            </p>
                        }
                    </h3>
                }
            </div>
        </div>
    </section>
    <section expanded>
        <h2>Answers</h2>
        <div>
            <div class="m2 right">
                @*@if (Model.Answers.Max(s => s.Text.Length) < 50)
                    {
                        if (!Html.ViewContext.HttpContext.IsMobileBrowser())
                        {
                            if (Model.Answers.Count <= 2)
                            {
                                @Html.Raw(Html.GetAddsenseAdd(AdsenseType.Fixed_320_100, Model.ShowAdsInQuestion.GetValueOrDefault()))
                            }
                            else
                            {
                                @Html.Raw(Html.GetAddsenseAdd(AdsenseType.Fixed_336_280, Model.ShowAdsInQuestion.GetValueOrDefault()))
                            }
                        }
                    }*@
            </div>
            <div>
                @{
                    string correctId = $"correct{Html.GetNextId()}";
                }
                @if (Model.QuestionType == QuestionType.CheckBox)
                {

                    <ul class="fieldlist">
                        @foreach (var answer in Model.Answers)
                        {

                            if (answer.IsCorrect == true)
                            {
                                <li class="correct">
                                    <h3>
                                        <input type="checkbox" id="@(Html.GetNextId())" class="k-checkbox">
                                        <label class="k-checkbox-label" for="@(Html.GetNextId(true))" [class]="toggleVariable@(questionNumber) + ' k-checkbox-label'">
                                            @(answer.Text)
                                        </label>
                                    </h3>
                                </li>
                            }
                            else
                            {
                                <li>
                                    <h3>
                                        <input type="checkbox" id="@(Html.GetNextId())" class="k-checkbox">
                                        <label class="k-checkbox-label" for="@(Html.GetNextId(true))">

                                            @(answer.Text)
                                        </label>
                                    </h3>
                                </li>
                            }
                        }
                    </ul>
                }
                @if (Model.QuestionType == QuestionType.RadioButon)
                {
                    <ul class="fieldlist">
                        @foreach (var answer in Model.Answers)
                        {
                            if (answer.IsCorrect == true)
                            {
                                <li class="correct">
                                    <h3>
                                        <input type="radio" name="group" id="@(Html.GetNextId())" class="k-radio">
                                        <label class="k-radio-label" for="@(Html.GetNextId(true))" [class]="toggleVariable@(questionNumber) + ' k-radio-label'">
                                            @(Html.Raw(answer.Text))
                                        </label>
                                    </h3>
                                </li>
                            }
                            else
                            {
                                <li>
                                    <h3>
                                        <input type="radio" name="group" id="@(Html.GetNextId())" class="k-radio">
                                        <label class="k-radio-label" for="@(Html.GetNextId(true))">
                                            @(Html.Raw(answer.Text))
                                        </label>
                                    </h3>
                                </li>
                            }
                        }
                    </ul>
                }
                <br />
                <div class="center">
                    <input type="checkbox" id="@(Html.GetNextId())" class="k-checkbox" on="change: AMP.setState({ toggleVariable@(questionNumber): event.checked ? 'green' : ''})">
                    <label class="k-checkbox-label" for="@(Html.GetNextId(true))">
                        Show correct answer
                    </label>
                </div>
            </div>
        </div>
    </section>
    @if (Model.ShowAdsInQuestion.GetValueOrDefault())
    {
        @if (Model?.Explanations?.Count > 0 || Model.References?.Count > 0)
        {
        <section expanded>
            <h2>Advertisement</h2>
            <div class="center">
                @Html.Raw(Html.GetAddsenseAdd(AdsenseType.Fixed_336_280, Model.ShowAdsInQuestion.GetValueOrDefault()))
            </div>
        </section>
            }
        }
    @if (Model?.Explanations?.Count > 0)
    {
        <section>
            <h2>Explanation (Click to expand)</h2>
            <div>
                @*<div class="m2 right">
                        @if (Model.Explanations.Select(s => s.Text?.Length).Sum() > 500)
                        {
                            @Html.Raw(Html.GetAddsenseAdd(AdsenseType.Fixed_336_280, Model.ShowAdsInQuestion.GetValueOrDefault()))
                        }
                        else
                        {
                            @Html.Raw(Html.GetAddsenseAdd(AdsenseType.Fixed_320_100, Model.ShowAdsInQuestion.GetValueOrDefault()))
                        }
                    </div>*@
                <div>
                    @if (Model.Explanations?.Count > 0)
                    {

                        @foreach (var explanation in Model.Explanations)
                        {
                            <p class="justify">
                                @explanation.Text
                            </p>
                        }
                    }
                </div>
            </div>
        </section>
    }
    @if (Model.References?.Count > 0)
    {
        <section>
            <h2>References (Click to expand)</h2>
            <div>
                @*<div class="m2 right">
                        @if (Model.References.Select(s => s.Text?.Length).Sum() > 500)
                        {
                            @Html.Raw(Html.GetAddsenseAdd(AdsenseType.Fixed_336_280, Model.ShowAdsInQuestion.GetValueOrDefault()))
                        }
                        else
                        {
                            @Html.Raw(Html.GetAddsenseAdd(AdsenseType.Fixed_320_100, Model.ShowAdsInQuestion.GetValueOrDefault()))
                        }
                    </div>*@
                <div>
                    @if (Model.References?.Count > 0)
                    {
                        @foreach (var reference in Model.References)
                        {
                            <p class="justify">
                                <a href="@reference.Url" target="_blank" rel="noopener">@(!string.IsNullOrWhiteSpace(reference.Text) ? reference.Text : reference.Url)</a>
                            </p>
                        }
                    }
                </div>
            </div>
        </section>
    }
</amp-accordion>
<partial name="_PrevNextPartial" />
<hr />
<script type="application/ld+json">
    {
    "@@context": "https://schema.org",
    "@@type": "BreadcrumbList",
    "itemListElement": [{
    "@@type": "ListItem",
    "position": 1,
    "name": "@Model?.Exam?.Provider?.ToLowerInvariant()",
    "item": "@($"{pageBaseCanonicalUrl}/{Model?.Exam?.Provider?.ToLowerInvariant()}")"
    },{
    "@@type": "ListItem",
    "position": 2,
    "name": "@Model?.Exam?.Code?.ToLowerInvariant()",
    "item": "@($"{pageBaseCanonicalUrl}/{Model?.Exam?.Provider?.ToLowerInvariant()}/{Model?.Exam?.Code?.ToLowerInvariant()}")"
    },{
    "@@type": "ListItem",
    "position": 3,
    "name": "@($"question {questionNumber}")",
    "item": "@($"{pageBaseCanonicalUrl}/{Model?.Exam?.Provider?.ToLowerInvariant()}/{Model?.Exam?.Code?.ToLowerInvariant()}/question{questionNumber}")"
    }]
    }
</script>

